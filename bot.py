#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import asyncio
import json
import logging
import os
import random
import re
from typing import List, Dict, Any

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from supabase import create_client  # supabase-py

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# ---------- –ö–û–ù–§–ò–ì (–∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è) ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")  # service_role –¥–ª—è –∑–∞–ø–∏—Å–∏
TASKS_TABLE = os.getenv("TASKS_TABLE", "tasks")
CODES_TABLE = os.getenv("CODES_TABLE", "codes")

if not BOT_TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    logger.critical("–ù—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY")
    raise SystemExit(1)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase ----------
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ----------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ---------- –£—Ç–∏–ª–∏—Ç–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ ----------
def normalize_answer(s: str) -> str:
    if not isinstance(s, str):
        return ""
    s = s.lower().strip()
    # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –≥—Ä–∞–¥—É—Å–æ–≤, –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    s = re.sub(r"[¬∞¬∫\^‚Ä¢√ó√ó\*\/\\\.,;:!?\-\(\)\[\]\"']", "", s)
    s = re.sub(r"\s+", "", s)
    return s

# ---------- –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏) ----------
user_sessions: Dict[int, Dict[str, Any]] = {}
# –§–æ—Ä–º–∞—Ç session: {
#   "tasks": [ {...} ],
#   "current": int,
#   "correct": int,
#   "wrong": [ (question, explanation) ],
#   "waiting_text": bool
# }

# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
async def main_menu(user_id: int):
    user_sessions.pop(user_id, None)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_test")]
    ])
    await bot.send_message(user_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)

# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–¥—É (—Ç–∞–±–ª–∏—Ü–∞ CODES_TABLE) ----------
@dp.message(F.text.regexp(r"^[A-Z0-9]{4,10}$"))  # –¥–æ–ø—É—Å–∫–∞–µ–º 4-10 —Å–∏–º–≤–æ–ª–æ–≤ (A-Z0-9)
async def register_user(message: Message):
    code = message.text.strip()
    user_id = message.from_user.id

    # –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ Supabase
    res = supabase.table(CODES_TABLE).select("*").eq("code", code).maybe_single().execute()
    data = res.data
    err = res.error
    if err:
        logger.error("Supabase error select code: %s", err)
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if not data:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
        return

    # data ‚Äî –∑–∞–ø–∏—Å—å; –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–ª—è: code, telegram_id
    if data.get("telegram_id") in (None, ""):
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º telegram_id
        upd = supabase.table(CODES_TABLE).update({"telegram_id": user_id}).eq("code", code).execute()
        if upd.error:
            logger.error("Supabase error update code: %s", upd.error)
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ–¥–∞. –ù–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ.")
            return
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
        await main_menu(user_id)
    elif data.get("telegram_id") == user_id:
        await message.answer("‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await main_menu(user_id)
    else:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ Supabase ----------
def load_tasks_from_supabase() -> List[Dict[str, Any]]:
    res = supabase.table(TASKS_TABLE).select("*").execute()
    if res.error:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: %s", res.error)
        return []
    tasks = res.data or []
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª–µ options, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON
    for t in tasks:
        if "options" in t and isinstance(t["options"], str):
            try:
                t["options"] = json.loads(t["options"])
            except Exception:
                # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
                t["options"] = [t["options"]]
    return tasks

# ---------- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ ----------
@dp.message(F.text == "/test")
async def start_test_cmd(message: Message):
    await begin_test(message.from_user.id)

@dp.callback_query(F.data == "start_test")
async def start_test_callback(call: CallbackQuery):
    await begin_test(call.from_user.id)

async def begin_test(user_id: int):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –∏—â–µ–º –∑–∞–ø–∏—Å—å –≤ codes —Å telegram_id = user_id
    res = supabase.table(CODES_TABLE).select("*").eq("telegram_id", user_id).maybe_single().execute()
    if res.error:
        logger.error("Supabase error checking registration: %s", res.error)
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return
    if not res.data:
        await bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.")
        return

    tasks = load_tasks_from_supabase()
    if not tasks:
        await bot.send_message(user_id, "–í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞—á –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return

    random.shuffle(tasks)
    user_sessions[user_id] = {
        "tasks": tasks,
        "current": 0,
        "correct": 0,
        "wrong": [],
        "waiting_text": False
    }

    # –¢–∞–π–º–µ—Ä 10 –º–∏–Ω—É—Ç
    asyncio.create_task(test_timer(user_id, 600))
    await send_task(user_id)

async def test_timer(user_id: int, seconds: int):
    await asyncio.sleep(seconds)
    if user_id in user_sessions:
        await show_results(user_id)

# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ ----------
async def send_task(user_id: int):
    session = user_sessions.get(user_id)
    if not session:
        return
    if session["current"] >= len(session["tasks"]):
        await show_results(user_id)
        return

    task = session["tasks"][session["current"]]
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    back_button = [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")]

    ttype = task.get("type", "choice")
    question_text = task.get("question", "(–≤–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω)")

    if ttype == "choice":
        opts = task.get("options") or []
        for opt in opts:
            kb.inline_keyboard.append([InlineKeyboardButton(text=str(opt), callback_data=f"ans:{str(opt)}")])
        kb.inline_keyboard.append([InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")])
        kb.inline_keyboard.append(back_button)
        await bot.send_message(user_id, f"‚ùì {question_text}", reply_markup=kb)
    elif ttype == "text":
        session["waiting_text"] = True
        kb.inline_keyboard.append([InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")])
        kb.inline_keyboard.append(back_button)
        await bot.send_message(user_id, f"‚ùì {question_text}\n\n‚úç –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", reply_markup=kb)
    else:
        # fallback
        await bot.send_message(user_id, f"‚ùì {question_text}")
        session["current"] += 1
        await send_task(user_id)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ (–≤–∞—Ä–∏–∞–Ω—Ç—ã) ----------
@dp.callback_query(F.data.startswith("ans:"))
async def process_answer(call: CallbackQuery):
    user_id = call.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        await call.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏ /test –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é.")
        return

    task = session["tasks"][session["current"]]
    answer = call.data.split(":", 1)[1]

    correct = task.get("answer")
    if normalize_answer(str(answer)) == normalize_answer(str(correct)):
        session["correct"] += 1
        await call.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        session["wrong"].append((task.get("question", ""), task.get("explanation", "")))
        await call.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")

    session["current"] += 1
    session["waiting_text"] = False
    await send_task(user_id)

@dp.callback_query(F.data == "skip")
async def skip_task(call: CallbackQuery):
    user_id = call.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        return
    task = session["tasks"].pop(session["current"])
    session["tasks"].append(task)
    session["waiting_text"] = False
    await send_task(user_id)

@dp.callback_query(F.data == "back_menu")
async def go_back_menu(call: CallbackQuery):
    await main_menu(call.from_user.id)

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ----------
@dp.message()
async def process_text_answer(message: Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if not session or not session.get("waiting_text"):
        return

    task = session["tasks"][session["current"]]
    answer = message.text.strip()

    if normalize_answer(answer) == normalize_answer(task.get("answer", "")):
        session["correct"] += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        session["wrong"].append((task.get("question", ""), task.get("explanation", "")))
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")

    session["current"] += 1
    session["waiting_text"] = False
    await send_task(user_id)

# ---------- –ò—Ç–æ–≥ ----------
async def show_results(user_id: int):
    session = user_sessions.pop(user_id, None)
    if not session:
        return
    total = len(session["tasks"])
    correct = session["correct"]
    wrong = session["wrong"]

    text = f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n"
    if wrong:
        text += "\n–û—à–∏–±–∫–∏:\n"
        for q, exp in wrong:
            text += f"\n‚ùå {q}\n‚ÑπÔ∏è {exp}\n"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="start_test")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_menu")]
    ])
    await bot.send_message(user_id, text, reply_markup=kb)

# ---------- –ó–∞–ø—É—Å–∫ (polling) ----------
async def main():
    logger.info("Bot starting (polling)...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
